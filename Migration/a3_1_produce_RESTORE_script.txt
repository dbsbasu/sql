-- produce restore script from db -- starts
-- produce database restore script. as easy as 1, 2, 3...
use [master]
go
IF  EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE name = '##file_tb' AND type in (N'U'))
DROP TABLE ##file_tb
GO
set nocount on;
declare @Litespeed_Ind char(1);
--                 please indicate ('y') if your backup is Litespeed              <--- (1)
set @Litespeed_Ind = 'n';
declare @target_instance varchar(80);
--                 your target server name                                        <--- (2)
set @target_instance = 'xxx';
--                 your backup path and I will append target_Server\database.bak' <--- (3)
declare @backup_device varchar(80);
set @backup_device = 'location\';
DECLARE @db1name varchar(80);
declare @sqlcmd0 varchar(8000);
declare @sqlcmd1 varchar(8000);
declare @sqlcmd2 varchar(8000);
declare @sqlcmd3 varchar(8000);
declare @sqlcmdL1 varchar(8000);
declare @sqlcmdL2 varchar(8000);
declare @sqlcmdL3 varchar(8000);
declare @log_name varchar(400);
declare @phy_name varchar(400);
create table ##file_tb
(
	 log_name varchar(400)
	,crap1    smallint 
	,phy_name varchar(400)
	,crap2    varchar(80)
	,crap3    varchar(80)
	,crap4    varchar(80)
	,crap5    varchar(80)
	,crap6    varchar(80)
);

DECLARE user_dbs CURSOR READ_ONLY FOR 
select name from master.sys.databases 
where name not in ('master', 'tempdb', 'model', 'msdb', 'DBAUtils')
and state = 0
order by name asc;
OPEN user_dbs;
FETCH NEXT FROM user_dbs INTO @db1name;
WHILE (@@fetch_status <> -1)
BEGIN
	IF (@@fetch_status <> -2)
	BEGIN
		set @sqlcmd0 = '';
		set @sqlcmd0 = 'insert ##file_tb exec' + quotename(@db1name) + '..sp_helpfile';
		exec (@sqlcmd0);
		update ##file_tb
		set log_name = REPLACE(REPLACE(log_name,SPACE(1),'@'),'@',''), phy_name = REPLACE(REPLACE(phy_name,SPACE(1),'@'),'@','')
		set @sqlcmd1 = '';
		set @sqlcmd1 = 'use [master]' + CHAR(10);
		set @sqlcmd1 = @sqlcmd1 + 'go' + CHAR(10);
		set @sqlcmd1 = @sqlcmd1 + 'RESTORE DATABASE ' +QUOTENAME(@db1name) + CHAR(10) + ' FROM DISK = ';
		set @sqlcmd1 = @sqlcmd1 + 'N''' +@backup_device+ @target_instance + '\Data\';
		set @sqlcmd1 = @sqlcmd1 + @db1name + '.bak''' + CHAR(10);
		set @sqlcmd1 = @sqlcmd1 + ' WITH  FILE = 1, ';
		set @sqlcmdL1 = '';
		set @sqlcmdL1 = 'use [master]' + CHAR(10);
		set @sqlcmdL1 = @sqlcmdL1 + 'exec master.dbo.xp_restore_database @database =  N''' + @db1name + ''',' + CHAR(10) + ' @filename = ';
		set @sqlcmdL1 = @sqlcmdL1 + 'N''' +@backup_device + @target_instance + '\Data\';
		set @sqlcmdL1 = @sqlcmdL1 + @db1name + '.bak'',' + CHAR(10);
		set @sqlcmdL1 = @sqlcmdL1 + ' @filenumber = 1, ' + CHAR(10);
		set @sqlcmdL1 = @sqlcmdL1 + ' @with = N''REPLACE'', ' + CHAR(10);
		set @sqlcmdL1 = @sqlcmdL1 + ' @with = N''STATS = 10'', ' ;
		if @Litespeed_Ind = 'y'
			print @sqlcmdL1;
		else
			print @sqlcmd1;
		DECLARE all_files CURSOR READ_ONLY
		FOR select log_name, phy_name
		from ##file_tb
		order by crap6 asc, substring(phy_name,len(phy_name)-3,len(phy_name)) asc, log_name asc;
		OPEN all_files;
		FETCH NEXT FROM all_files INTO @log_name, @phy_name;
		WHILE (@@fetch_status <> -1)
		BEGIN
			IF (@@fetch_status <> -2)
			BEGIN
			set @sqlcmd2 = '';
			set @sqlcmd2 = ' MOVE N''' + @log_name + '''' + ' TO N''' + @phy_name + ''',';
			set @sqlcmdL2 = '';
			set @sqlcmdL2 = ' @with = N''MOVE N''''' + @log_name + ''''' TO N''''' + @phy_name + ''''''',';
			if @Litespeed_Ind = 'y'
				print @sqlcmdL2;
			else
				print @sqlcmd2;
			END
			FETCH NEXT FROM all_files INTO @log_name, @phy_name
		END
		CLOSE all_files
		DEALLOCATE all_files
		set @sqlcmd3 = '';
		set @sqlcmd3 = ' NOUNLOAD,  REPLACE,  STATS = 10';
		set @sqlcmd3 = @sqlcmd3 + CHAR(10);
		set @sqlcmd3 = @sqlcmd3 + 'GO ' + CHAR(10);
		set @sqlcmdL3 = ' @affinity = 0,' + CHAR(10);
		set @sqlcmdL3 = @sqlcmdL3 +' @logging = 0' + CHAR(10);
		set @sqlcmdL3 = @sqlcmdL3 + 'GO ' + CHAR(10);
		if @Litespeed_Ind = 'y'
			print @sqlcmdL3;
		else
			print @sqlcmd3;
		--select * from ##file_tb
		--order by crap6 asc, substring(phy_name,len(phy_name)-3,len(phy_name)) asc, log_name asc;
		delete from ##file_tb;
	FETCH NEXT FROM user_dbs INTO @db1name;
	END;
END;
CLOSE user_dbs;
DEALLOCATE user_dbs;

IF  EXISTS (SELECT * FROM tempdb.dbo.sysobjects WHERE name = '##file_tb' AND type in (N'U'))
DROP TABLE ##file_tb
GO
-- produce restore script from db -- ends

-- produce restore script from backup PS -- starts
[CmdletBinding()]
Param(`
  [Parameter(Mandatory=$True)] [string]$SQLInstance_Port,
  [Parameter(Mandatory=$True)] [string]$LiveDBName,
  [Parameter(Mandatory=$True)] [string]$Backup_Location_and_File_Name
)

# determine script location
$myScriptLocation = Split-Path -Path $MyInvocation.MyCommand.Path # ($PSScriptRoot will also do)
$myScriptName =  ([io.fileinfo]$MyInvocation.MyCommand.Definition).BaseName

# create default log dir if not exists
$LogDir = $myScriptLocation + "\Logs"
if (!(Test-Path -Path $LogDir)){ New-Item -ItemType directory -Path $LogDir }
$outputFile = "$myScriptLocation\Logs\$myScriptName" + "_output.txt"

$header = Invoke-SQLcmd -ServerInstance $SQLInstance_Port -Database "msdb" -Query "restore headeronly from disk = N'$Backup_Location_and_File_Name'" 
$filelist = Invoke-SQLcmd -ServerInstance $SQLInstance_Port -Database "msdb" -Query "restore filelistonly from disk = N'$Backup_Location_and_File_Name'" 

$BakupDBName = $header.DatabaseName

$LogMessage  = "-- restore script from backup file `r`n"
$LogMessage += "USE [master] `r`n"
$LogMessage += "GO `r`n"
$LogMessage += "RESTORE DATABASE [$BakupDBName] `r`n"
$LogMessage += "FROM DISK = N'$Backup_Location_and_File_Name' `r`n"
$LogMessage += "WITH  FILE = 1, `r`n"
foreach ($file in $filelist) {
    $logicalfile = $file.logicalname
    $physicalfile  = $file.physicalname
    $LogMessage += "MOVE N'$logicalfile' TO N'$physicalfile', `r`n"
}
$LogMessage += "NOUNLOAD,  REPLACE,  STATS = 1 `r`n"
$LogMessage | Out-File $outputFile 

$dbfilelist = Invoke-SQLcmd -ServerInstance $SQLInstance_Port -Database $LiveDBName -Query "SELECT name as logicalFile, physical_name as physicalFile FROM sys.database_files WITH (nolock) " 

$LogMessage  = "-- restore script from live database `r`n"
$LogMessage += "USE [master] `r`n"
$LogMessage += "GO `r`n"
$LogMessage += "RESTORE DATABASE [$LiveDBName] `r`n"
$LogMessage += "FROM DISK = N'$Backup_Location_and_File_Name' `r`n"
$LogMessage += "WITH  FILE = 1, `r`n"
foreach ($dbfile in $dbfilelist) {
    $dblogicalfile = $dbfile.logicalFile
    $dbphysicalfile  = $dbfile.physicalFile
    $LogMessage += "MOVE N'$dblogicalfile' TO N'$dbphysicalfile', `r`n"
}
$LogMessage += "NOUNLOAD,  REPLACE,  STATS = 1 `r`n"
$LogMessage | Out-File $outputFile -Append

$LogMessage  = "`r`n`r`n/*"
$LogMessage += "input params `r`n"
$LogMessage += "SQLInstance Port  $SQLInstance_Port `r`n"
$LogMessage += "Live DB Name      $LiveDBName `r`n"
$LogMessage += "Backup File       $Backup_Location_and_File_Name `r`n"
$LogMessage += "*/"
$LogMessage | Out-File $outputFile -Append

-- produce restore script from backup PS -- ends

-- query restore hist -- starts
SELECT
 rh.restore_date, @@servername as DestinationServer,
 rh.destination_database_name,
 COALESCE(substring(bmf.physical_device_name, 1, ((len(bmf.physical_device_name))-CHARINDEX(('\'), reverse(bmf.physical_device_name))+1)), bmf.physical_device_name) as BackupFilePath,
 COALESCE(substring(bmf.physical_device_name, ((len(bmf.physical_device_name))-CHARINDEX(('\'), reverse(bmf.physical_device_name))+2),(len(bmf.physical_device_name))), bmf.physical_device_name) as BackupFile_used_for_restore,
 bs.database_name as source_database,
 bs.server_name as source_server_name,
 rh.user_name,
 rh.restore_type
FROM msdb.dbo.restorehistory rh
 INNER JOIN msdb.dbo.backupset bs ON rh.backup_set_id = bs.backup_set_id
 INNER JOIN msdb.dbo.backupmediafamily bmf ON bmf.media_set_id = bs.media_set_id
ORDER BY rh.restore_history_id desc

-- query restore hist -- ends

-- obtain backup info -- starts
set transaction isolation level read uncommitted

select 
BackupFinishDate
, SQLInstanceName, DBName
, bkup_file
, BackupType, CompressedBackupSizeMB, BackupSizeMB
/*, BackupFilePath, BackupFileName*/ , BackupStartDate
from (
select
 (dense_RANK() over (partition by bs.database_name order by bs.backup_start_date desc)) as rank1
,bs.machine_name as MachineName
,@@SERVERNAME as SQLInstanceName
,bs.[database_name] as DBName
,bmf.physical_device_name as bkup_file
/*,COALESCE(substring(bmf.physical_device_name, 1, ((len(bmf.physical_device_name))-CHARINDEX(('\'), reverse(bmf.physical_device_name))+1)), bmf.physical_device_name) as BackupFilePath
,COALESCE(substring(bmf.physical_device_name, ((len(bmf.physical_device_name))-CHARINDEX(('\'), reverse(bmf.physical_device_name))+2),(len(bmf.physical_device_name))), bmf.physical_device_name) as BackupFileName
*/
,bs.[type] as BackupType
,bs.backup_start_date as BackupStartDate
,bs.backup_finish_date as BackupFinishDate
,cast(round((bs.Compressed_backup_size/1048576),0) as int) as CompressedBackupSizeMB
,cast(round((bs.backup_size/1048576),0) as int) as BackupSizeMB
from msdb.dbo.backupset as bs
inner join sys.databases as db on db.name = bs.database_name
and db.name not in ('master','model','msdb','dba')
inner join msdb.dbo.backupmediafamily bmf
on bs.media_set_id = bmf.media_set_id
and bs.[type] in ('d')
and bs.backup_start_date <= (select max(bs2.backup_start_date)
						from msdb.dbo.backupset bs2  with (nolock)
						where bs2.media_set_id = bs.media_set_id
						and   bs2.database_name = bs.database_name
						and   bs2.[type] = bs.[type])
) as backup_data
where backup_data.rank1 = 1
order by BackupFinishDate desc
-- obtain backup info -- ends
