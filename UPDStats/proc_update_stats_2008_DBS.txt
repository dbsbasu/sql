USE [DBAUtils]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_update_stats_2008_DBS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[proc_update_stats_2008_DBS]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[proc_update_stats_2008_DBS] 
(
	@JobName NVarChar(256) = NULL
)
AS
SET NoCount ON;
SET Xact_Abort ON;
SET Ansi_Padding ON;
SET Ansi_Warnings ON;
SET ArithAbort ON;
SET Concat_Null_Yields_Null ON;
SET Numeric_RoundAbort OFF;
SET Quoted_Identifier ON;

/* Declare variables */
DECLARE
		 @DebugMode					Bit             
		,@DebugMessage				NVarChar(1000)	
		,@DefaultJobName			NVarChar(50)		
		,@ExecuteSQL				Bit             	
		,@IndexHistoryDaystoKeep	Int				
		,@MaxDopRestriction			TinyInt		

		,@DatabaseName				varchar(128) 
		,@SchemaName				varchar(128) 
		,@ObjectId					int
		,@ObjectName				varchar(128)
		,@IndexId					int
		,@IndexName					varchar(128)
		,@IsSuccessful				bit
		,@StartTime					datetime
		,@EndTime					datetime
		,@DurationSeconds			int
		,@ErrorMessage				VARCHAR(1000)
		,@REORGIxStatsUpdated				bit
		,@SqlCommand				nvarchar(4000)
		;

SET @DefaultJobName = 'Index Maint';

SELECT TOP 1 @IndexHistoryDaystoKeep = [Value]
FROM dbo.IndexDefragSettings
WHERE [Name] = 'Index History Days To Keep'
AND (JobName IS NULL OR JobName = @JobName)
ORDER BY JobName DESC; 

SELECT TOP 1 @MaxDopRestriction = [Value]
FROM dbo.IndexDefragSettings
WHERE [Name] = 'Max Dop Restriction'
AND (JobName IS NULL OR JobName = @JobName)
ORDER BY JobName DESC; 

DELETE dbo.UpdateStatisticsLog
WHERE StartTime < GetDate() - @IndexHistoryDaystoKeep	

IF @DebugMode = 1 RAISERROR('Starting up...',0,42) WITH NoWait;

/* Create temp tables */
IF OBJECT_ID('tempdb.dbo.##processor') IS NOT NULL
BEGIN
	DROP TABLE ##processor;
END
CREATE TABLE ##processor
(
	 [Index]			Int
	,[Name]				VarChar(128) COLLATE database_default
	,Internal_Value		Int
	,Character_Value	VarChar(128) COLLATE database_default
);

IF @JobName IS NULL
BEGIN
	/* Job Name to default if not provided as input param */
	SET @JobName = @DefaultJobName;
END
ELSE
BEGIN
	/* Ensure job exists if one was passed */
	IF NOT EXISTS(SELECT 1 FROM dbo.IndexDefragJob WHERE JobName = @JobName)
	BEGIN
		SET @ErrorMessage = 'JobName "' + @JobName + '" does not exist in DBAUtil.dbo.IndexDefragJob';
		RAISERROR(@ErrorMessage,16,1) WITH LOG;
		RETURN
	END
END

INSERT INTO ##processor
EXECUTE XP_MSVER 'ProcessorCount';
-- Make sure we're not exceeding the number of processors we have available

IF @MaxDopRestriction IS Not Null AND @MaxDopRestriction > (SELECT Internal_Value FROM ##processor)

BEGIN
	SELECT @MaxDopRestriction = Internal_Value FROM ##processor;
END

IF @DebugMode = 1 RAISERROR('Grabbing a list of our databases...',0,42) WITH NoWait;


IF @DebugMode = 1 RAISERROR('Getting list of indexes in all databases...',0,42) WITH NoWait;

/*Begin our loop for updating stats for each index*/
SELECT @DebugMessage = 'Looping through our list... there are ' 
	+ CAST(COUNT(*) AS VarChar(10)) + ' indexes to update statistics!'
FROM [dbo].[IndexDefragLog]
WHERE [StartTime] > GETDATE()-1
AND [Action] = 'REORGANIZE'
AND [IsSuccessful] = 1
AND [JOBNAME] = @JobName
AND [REORGIxStatsUpdated] IS NULL;
			  
IF @DebugMode = 1 RAISERROR(@DebugMessage,0,42) WITH NoWait;

WHILE EXISTS (SELECT 1 FROM [dbo].[IndexDefragLog]
			  WHERE [StartTime] > GETDATE()-1
			  AND [Action] = 'REORGANIZE'
			  AND [IsSuccessful] = 1
			  AND [JOBNAME] = @JobName
			  AND [REORGIxStatsUpdated] IS NULL) -- REORGIxStatsUpdated: null = not updated yet. 1 = succeeds. 0 = failure. in case of REORG only.
BEGIN
 SELECT DISTINCT TOP 1
	 @JobName = [JobName]
	,@DatabaseName = [DatabaseName]
	,@SchemaName = [SchemaName]
	,@ObjectId = [ObjectId]
	,@ObjectName = [ObjectName]
	,@IndexId = [IndexId]
	,@IndexName = [IndexName]
	-- Upto SQL 2008, there is no partition level Stats. So, we will update Stats for the entire Index, if at least a single part was Reorged.
 FROM [dbo].[IndexDefragLog]
 WHERE [StartTime] > GETDATE()-1
 AND [Action] = 'REORGANIZE'
 AND [IsSuccessful] = 1
 AND [JOBNAME] = @JobName
 AND [REORGIxStatsUpdated] IS NULL
 ORDER BY [JobName],[DatabaseName],[SchemaName],[ObjectId],[IndexId];
 SET @SqlCommand = '';	
 SET @SqlCommand = 'use '	+ @DatabaseName + ';' 
	+ ' UPDATE STATISTICS '	+ @SchemaName+'.'	+ @ObjectName 	+' (' 	+ @IndexName 	+ ');';
-- PRINT (@SqlCommand);

 BEGIN TRY
 -- REORGIxStatsUpdated on IndexDefragLog, IsSuccess on UpdateStatisticsLog INITIALIZED to 1
	SET @REORGIxStatsUpdated = 1;
	SET @IsSuccessful = 1;
    SET @ErrorMessage = '';
	SET @StartTime  = GETDATE();
	EXECUTE sp_executesql @SqlCommand;
 END TRY
 BEGIN CATCH
-- REORGIxStatsUpdated on IndexDefragLog, IsSuccess on UpdateStatisticsLog SET to 0 indicating a failure
	SET @REORGIxStatsUpdated = 0;
	SET @IsSuccessful = 0;
	SET @ErrorMessage = '';
	SET @ErrorMessage = 'Error while updating STATS. ' 
					  + '  Database: ' + @DatabaseName
					  + '  Schema: ' + @SchemaName
					  + '  Object: ' + @ObjectName
					  + '  Index: ' + @IndexName
					  + '  ErrorNumber: ' + CAST(ISNULL(ERROR_NUMBER(),'') AS NVarChar(20)) 
					  + '  Message: ' + ISNULL(ERROR_MESSAGE(),'');
	RAISERROR(@ErrorMessage,16,1) WITH LOG;
 END CATCH
-- update IndexDefragLog
 BEGIN TRY
	 UPDATE [dbo].[IndexDefragLog]
	 SET [REORGIxStatsUpdated] = @REORGIxStatsUpdated
	 WHERE [JobName] = @JobName
	 AND [DatabaseName] = @DatabaseName
	 AND [SchemaName] = @SchemaName
	 AND [ObjectId] = @ObjectId        -- index id along with object id within a database can uniquely identify object/index
	 AND [ObjectName] = @ObjectName    -- schema, object/index names were not essential, however just leaving them as it is
	 AND [IndexId] = @IndexId
	 AND [IndexName] = @IndexName 
	 AND [REORGIxStatsUpdated] IS NULL;
 END TRy	 
 BEGIN CATCH
-- Failure. Update error on IndexDefragLog
	SET @ErrorMessage = '';
	SET @ErrorMessage = 'Update error on IndexDefragLog. ' 
					  + '  Database: ' + @DatabaseName
					  + '  Schema: ' + @SchemaName
					  + '  Object: ' + @ObjectName
					  + '  Index: ' + @IndexName
					  + '  ErrorNumber: ' + CAST(ISNULL(ERROR_NUMBER(),'') AS NVarChar(20)) 
					  + '  Message: ' + ISNULL(ERROR_MESSAGE(),'');
	RAISERROR(@ErrorMessage,16,1) WITH LOG;
 END CATCH
 
-- insert into UpdateStatisticsLog
 BEGIN TRY
	 SET @EndTime  = GETDATE();
	 SET @DurationSeconds = DATEDIFF(SECOND,@StartTime,@EndTime);
	 INSERT INTO [dbo].[UpdateStatisticsLog]
           ([JobName]
           ,[DatabaseName]
           ,[SchemaName]
           ,[ObjectId]
           ,[ObjectName]
           ,[IndexId]
           ,[IndexName]
           ,[StartTime]
           ,[EndTime]
           ,[DurationSeconds]
           ,[SQLStatement]
           ,[IsSuccessful]
           ,[ErrorMessage])
     VALUES
           (@JobName
           ,@DatabaseName
           ,@SchemaName
           ,@ObjectId
           ,@ObjectName
           ,@IndexId
           ,@IndexName
           ,@StartTime
           ,@EndTime
           ,@DurationSeconds
           ,@SqlCommand
           ,@IsSuccessful
           ,@ErrorMessage);
 END TRY
 BEGIN CATCH
-- Failure. Insert error on UpdateStatisticsLog
	SET @ErrorMessage = '';
	SET @ErrorMessage = 'Insert error on UpdateStatisticsLog. ' 
					  + '  Database: ' + @DatabaseName
					  + '  Schema: ' + @SchemaName
					  + '  Object: ' + @ObjectName
					  + '  Index: ' + @IndexName
					  + '  ErrorNumber: ' + CAST(ISNULL(ERROR_NUMBER(),'') AS NVarChar(20)) 
					  + '  Message: ' + ISNULL(ERROR_MESSAGE(),'');
	RAISERROR(@ErrorMessage,16,1) WITH LOG;
 END CATCH

END;
 
IF @DebugMode != 1
BEGIN
	DROP TABLE ##processor;
END

IF @DebugMode = 1 RAISERROR('DONE!  Thank you for taking care of your statistics!  :)',0,42) WITH NoWait;

RETURN 0


GO


