--query 1
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
BEGIN TRAN 
DBCC CHECKIDENT('dbo.t1',RESEED, 1001)
SELECT ob.name, idc.name, idc.is_identity, idc.seed_value, idc.increment_value, idc.last_value 
FROM sys.objects ob
INNER JOIN sys.identity_columns idc ON idc.object_id = ob.object_id
WHERE ob.name = 't1'
--ROLLBACK TRAN




--query 2
USE test1;
/* SETUP
--ALTER database test1 set recovery simple;
drop table if exists dbo.t1;
create table dbo.t1 (id int not null identity (1,1));
drop index if exists cl_t1 on dbo.t1;
create clustered index cl_t1 on dbo.t1 (id asc);
*/

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

SET NOCOUNT ON;
declare @i int = 0;

while (@i <100)
begin
    insert into dbo.t1 default values;
    set @i = @i + 1;
end
checkpoint;

--waitfor delay '00:01:00';
--SELECT  [Current LSN], [Operation], [Context], [Transaction ID], [AllocUnitName], [Transaction Name] FROM fn_dblog (NULL, NULL);

select 'initial values';
select max(id) as rec_count from dbo.t1;
select IDENT_CURRENT('dbo.t1') as current_identity;

-- > NOW RUN QUERY 2
-- now run this section STARTS
select 'truncating...'
BEGIN TRANSACTION;
  TRUNCATE TABLE dbo.t1;

GO
-- now run this section ENDS. IT WILL BE BLOCKED

SELECT ob.name, idc.name, idc.is_identity, idc.seed_value, idc.increment_value, idc.last_value 
FROM sys.objects ob
INNER JOIN sys.identity_columns idc ON idc.object_id = ob.object_id
WHERE ob.name = 't1'

--ROLLBACK TRANSACTION;

/*

select 'after rollback'
select max(id) as rec_count from dbo.t1;
select IDENT_CURRENT('dbo.t1') as current_identity;

SELECT ob.name, idc.name, idc.is_identity, idc.seed_value, idc.increment_value, idc.last_value 
FROM sys.objects ob
INNER JOIN sys.identity_columns idc ON idc.object_id = ob.object_id
WHERE ob.name = 't1'
*/


--https://www.sqlskills.com/blogs/paul/a-sql-server-dba-myth-a-day-1930-truncate-table-is-non-logged/
--https://sqlperformance.com/2013/05/sql-performance/drop-truncate-log-myth



--query 3
--my_sp_wbo2
SELECT des.session_id ,
des.status ,
des.login_name ,
des.[HOST_NAME] ,
der.blocking_session_id ,
DB_NAME(der.database_id) AS database_name ,
der.command ,
des.cpu_time ,
des.reads ,
des.writes ,
dec.last_write ,
des.[program_name] ,
der.wait_type ,
der.wait_time ,
der.last_wait_type ,
der.wait_resource ,
CASE des.transaction_isolation_level
WHEN 0 THEN 'Unspecified'
WHEN 1 THEN 'ReadUncommitted'
WHEN 2 THEN 'ReadCommitted'
WHEN 3 THEN 'Repeatable'
WHEN 4 THEN 'Serializable'
WHEN 5 THEN 'Snapshot'
END AS transaction_isolation_level ,
OBJECT_NAME(dest.objectid, der.database_id) AS OBJECT_NAME ,
SUBSTRING(dest.text, der.statement_start_offset / 2,
( CASE WHEN der.statement_end_offset = -1
THEN DATALENGTH(dest.text)
ELSE der.statement_end_offset
END - der.statement_start_offset ) / 2)
AS [executing statement] ,
deqp.query_plan
FROM sys.dm_exec_sessions des
LEFT JOIN sys.dm_exec_requests der
ON des.session_id = der.session_id
LEFT JOIN sys.dm_exec_connections dec
ON des.session_id = dec.session_id
CROSS APPLY sys.dm_exec_sql_text(der.sql_handle) dest
CROSS APPLY sys.dm_exec_query_plan(der.plan_handle) deqp
WHERE des.session_id <> @@SPID
--and der.database_id = db_id()
ORDER BY des.session_id


--Statements causing blocking
SELECT DTL.[request_session_id] AS [session_id] ,
DB_NAME(DTL.[resource_database_id]) AS [Database] ,
DTL.resource_type ,
CASE WHEN DTL.resource_type IN ( 'DATABASE', 'FILE', 'METADATA' ) THEN DTL.resource_type 
WHEN DTL.resource_type = 'OBJECT' THEN OBJECT_NAME(DTL.resource_associated_entity_id, DTL.[resource_database_id])
WHEN DTL.resource_type IN ( 'KEY', 'PAGE', 'RID' ) THEN ( SELECT OBJECT_NAME([object_id])
                                                            FROM sys.partitions
                                                           WHERE sys.partitions.hobt_id = DTL.resource_associated_entity_id)
ELSE 'Unidentified'
END AS [Parent Object] ,
DTL.request_mode AS [Lock Type] ,
DTL.request_status AS [Request Status] ,
DER.[blocking_session_id] ,
DES.[login_name] ,
CASE DTL.request_lifetime WHEN 0 THEN DEST_R.TEXT
ELSE DEST_C.TEXT
END AS [Statement]
FROM sys.dm_tran_locks DTL
LEFT JOIN sys.[dm_exec_requests] DER ON DTL.[request_session_id] = DER.[session_id]
INNER JOIN sys.dm_exec_sessions DES ON DTL.request_session_id = DES.[session_id]
INNER JOIN sys.dm_exec_connections DEC ON DTL.[request_session_id] = DEC.[most_recent_session_id]
OUTER APPLY sys.dm_exec_sql_text(DEC.[most_recent_sql_handle]) AS DEST_C
OUTER APPLY sys.dm_exec_sql_text(DER.sql_handle) AS DEST_R
WHERE 
--DTL.[resource_database_id] = DB_ID() and
DTL.[resource_type] NOT IN ( 'DATABASE', 'METADATA' ) and des.session_id <> @@SPID
and DTL.resource_associated_entity_id = 281474979397632  --(get it from SELECT * FROM sys.dm_tran_locks)
ORDER BY DTL.[request_session_id] ;



--query 4
SELECT  al.*
FROM sys.partitions pt
INNER JOIN sys.objects ob ON  ob.object_id = pt.object_id
INNER JOIN sys.allocation_units al ON al.container_id = pt.partition_id
--INNER JOIN sys.system_internals_allocation_units al ON al.container_id = pt.partition_id
WHERE ob.name = 't1'




